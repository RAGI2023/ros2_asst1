[0.009s] Invoking command in '/home/yin/ros2_asst1_ws/src/ros2_asst1/build/hello_ros': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/opt/ros/humble /usr/bin/cmake /home/yin/ros2_asst1_ws/src/ros2_asst1 -DCMAKE_INSTALL_PREFIX=/home/yin/ros2_asst1_ws/src/ros2_asst1/install/hello_ros
[0.073s] -- The C compiler identification is GNU 11.4.0
[0.131s] -- The CXX compiler identification is GNU 11.4.0
[0.137s] -- Detecting C compiler ABI info
[0.207s] -- Detecting C compiler ABI info - done
[0.213s] -- Check for working C compiler: /usr/bin/cc - skipped
[0.214s] -- Detecting C compile features
[0.214s] -- Detecting C compile features - done
[0.216s] -- Detecting CXX compiler ABI info
[0.303s] -- Detecting CXX compiler ABI info - done
[0.313s] -- Check for working CXX compiler: /usr/bin/c++ - skipped
[0.313s] -- Detecting CXX compile features
[0.314s] -- Detecting CXX compile features - done
[0.315s] -- Found ament_cmake: 1.3.10 (/opt/ros/humble/share/ament_cmake/cmake)
[0.457s] -- Found Python3: /usr/bin/python3 (found version "3.10.12") found components: Interpreter 
[0.523s] -- Found rclcpp: 16.0.10 (/opt/ros/humble/share/rclcpp/cmake)
[0.559s] -- Found rosidl_generator_c: 3.1.5 (/opt/ros/humble/share/rosidl_generator_c/cmake)
[0.562s] -- Found rosidl_adapter: 3.1.5 (/opt/ros/humble/share/rosidl_adapter/cmake)
[0.568s] -- Found rosidl_generator_cpp: 3.1.5 (/opt/ros/humble/share/rosidl_generator_cpp/cmake)
[0.576s] -- Using all available rosidl_typesupport_c: rosidl_typesupport_fastrtps_c;rosidl_typesupport_introspection_c
[0.586s] -- Using all available rosidl_typesupport_cpp: rosidl_typesupport_fastrtps_cpp;rosidl_typesupport_introspection_cpp
[0.616s] -- Found rmw_implementation_cmake: 6.1.2 (/opt/ros/humble/share/rmw_implementation_cmake/cmake)
[0.618s] -- Found rmw_fastrtps_cpp: 6.2.7 (/opt/ros/humble/share/rmw_fastrtps_cpp/cmake)
[0.716s] -- Found OpenSSL: /usr/lib/x86_64-linux-gnu/libcrypto.so (found version "3.0.2")  
[0.753s] -- Found FastRTPS: /opt/ros/humble/include  
[0.786s] -- Using RMW implementation 'rmw_fastrtps_cpp' as default
[0.793s] -- Looking for pthread.h
[0.879s] -- Looking for pthread.h - found
[0.880s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD
[0.964s] -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Success
[0.965s] -- Found Threads: TRUE  
[1.003s] -- Found geometry_msgs: 4.2.4 (/opt/ros/humble/share/geometry_msgs/cmake)
[1.012s] -- Found turtlesim: 1.4.2 (/opt/ros/humble/share/turtlesim/cmake)
[1.041s] -- Found tf2_ros: 0.25.8 (/opt/ros/humble/share/tf2_ros/cmake)
[1.095s] -- Found tf2_geometry_msgs: 0.25.8 (/opt/ros/humble/share/tf2_geometry_msgs/cmake)
[1.104s] -- Found eigen3_cmake_module: 0.1.1 (/opt/ros/humble/share/eigen3_cmake_module/cmake)
[1.105s] -- Found Eigen3: TRUE (found version "3.4.0") 
[1.105s] -- Ensuring Eigen3 include directory is part of orocos-kdl CMake target
[1.109s] -- Found ament_lint_auto: 0.12.11 (/opt/ros/humble/share/ament_lint_auto/cmake)
[1.176s] -- Added test 'cppcheck' to perform static code analysis on C / C++ code
[1.176s] -- Configured cppcheck include dirs: $<BUILD_INTERFACE:/home/yin/ros2_asst1_ws/src/ros2_asst1/include>
[1.176s] -- Configured cppcheck exclude dirs and/or files: 
[1.178s] -- Added test 'lint_cmake' to check CMake code style
[1.181s] -- Added test 'uncrustify' to check C / C++ code style
[1.181s] -- Configured uncrustify additional arguments: 
[1.182s] -- Added test 'xmllint' to check XML markup files
[1.183s] -- Configuring done
[1.195s] -- Generating done
[1.197s] -- Build files have been written to: /home/yin/ros2_asst1_ws/src/ros2_asst1/build/hello_ros
[1.205s] Invoked command in '/home/yin/ros2_asst1_ws/src/ros2_asst1/build/hello_ros' returned '0': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/opt/ros/humble /usr/bin/cmake /home/yin/ros2_asst1_ws/src/ros2_asst1 -DCMAKE_INSTALL_PREFIX=/home/yin/ros2_asst1_ws/src/ros2_asst1/install/hello_ros
[1.205s] Invoking command in '/home/yin/ros2_asst1_ws/src/ros2_asst1/build/hello_ros': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/opt/ros/humble /usr/bin/cmake --build /home/yin/ros2_asst1_ws/src/ros2_asst1/build/hello_ros -- -j20 -l20
[1.260s] [ 25%] [32mBuilding CXX object CMakeFiles/tf.dir/src/tf2_node.cpp.o[0m
[1.260s] [ 25%] [32mBuilding CXX object CMakeFiles/MYNODE.dir/src/my_node.cpp.o[0m
[1.263s] [ 37%] [32mBuilding CXX object CMakeFiles/follow.dir/src/follow_turtle.cpp.o[0m
[1.263s] [ 50%] [32mBuilding CXX object CMakeFiles/spawn.dir/src/spawn_client.cpp.o[0m
[3.412s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32[m[K,
[3.412s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29[m[K,
[3.412s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[3.412s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[3.412s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[3.412s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[3.412s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[3.412s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[3.413s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[3.413s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[3.413s]                  from [01m[K/home/yin/ros2_asst1_ws/src/ros2_asst1/src/tf2_node.cpp:1[m[K:
[3.413s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of ‘[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[K’:
[3.413s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from ‘[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.413s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.413s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.413s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.413s] [01m[K/home/yin/ros2_asst1_ws/src/ros2_asst1/src/tf2_node.cpp:43:80:[m[K   required from here
[3.413s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K [01;31m[Kerror: [m[Kno match for ‘[01m[Koperator=[m[K’ (operand types are ‘[01m[Krclcpp::detail::AnySubscriptionCallbackHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void>, false>::variant_type[m[K’ {aka ‘[01m[Kstd::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >[m[K’} and ‘[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[K’ {aka ‘[01m[Kstd::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[K’})
[3.413s]   394 |       [01;31m[Kcallback_variant_ = static_cast<typename scbth::callback_type>(callback)[m[K;
[3.414s]       |       [01;31m[K~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
[3.414s] In file included from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:28[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21[m[K,
[3.414s]                  from [01m[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155[m[K,
[3.414s]                  from [01m[K/home/yin/ros2_asst1_ws/src/ros2_asst1/src/tf2_node.cpp:1[m[K:
[3.414s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[Kcandidate: ‘[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<_Types>::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<_Types>&> std::variant<_Types>::operator=(_Tp&&) [with _Tp = _Tp; _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[K’
[3.414s]  1461 |         [01;36m[Koperator[m[K=(_Tp&& __rhs)
[3.414s]       |         [01;36m[K^~~~~~~~[m[K
[3.415s] [01m[K/usr/include/c++/11/variant:1461:9:[m[K [01;36m[Knote: [m[K  template argument deduction/substitution failed:
[3.415s] /usr/include/c++/11/variant: In substitution of ‘[01m[Ktemplate<class ... _Types> template<class _Tp, class> using __accepted_type = std::variant<_Types>::__to_type<__accepted_index<_Tp> > [with _Tp = std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>&&; <template-parameter-2-2> = void; _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[K’:
[3.415s] [01m[K/usr/include/c++/11/variant:1457:14:[m[K   required by substitution of ‘[01m[Ktemplate<class _Tp> std::enable_if_t<((__exactly_once<std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type> > && is_constructible_v<std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>, _Tp>) && is_assignable_v<std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::__accepted_type<_Tp&&, typename std::enable_if<__not_self<_Tp&&>, void>::type>&, _Tp>), std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&> std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >::operator=<_Tp>(_Tp&&) [with _Tp = std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>][m[K’
[3.415s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:25:[m[K   required from ‘[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[K’
[3.415s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from ‘[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.415s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.415s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.415s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.415s] [01m[K/home/yin/ros2_asst1_ws/src/ros2_asst1/src/tf2_node.cpp:43:80:[m[K   required from here
[3.415s] [01m[K/usr/include/c++/11/variant:1375:15:[m[K [01;31m[Kerror: [m[Kno type named ‘[01m[Ktype[m[K’ in ‘[01m[Kstruct std::enable_if<false, void>[m[K’
[3.415s]  1375 |         using [01;31m[K__accepted_type[m[K = __to_type<__accepted_index<_Tp>>;
[3.415s]       |               [01;31m[K^~~~~~~~~~~~~~~[m[K
[3.415s] /opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of ‘[01m[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; MessageT = turtlesim::msg::Pose_<std::allocator<void> >; AllocatorT = std::allocator<void>][m[K’:
[3.415s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:[m[K   required from ‘[01m[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.415s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = turtlesim::msg::Pose_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.416s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.416s] [01m[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:[m[K   required from ‘[01m[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = turtlesim::msg::Pose_<std::allocator<void> >; CallbackT = std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<turtlesim::msg::Pose_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<turtlesim::msg::Pose_<std::allocator<void> >, std::allocator<void> > >][m[K’
[3.416s] [01m[K/home/yin/ros2_asst1_ws/src/ros2_asst1/src/tf2_node.cpp:43:80:[m[K   required from here
[3.416s] [01m[K/usr/include/c++/11/variant:1398:16:[m[K [01;36m[Knote: [m[Kcandidate: ‘[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(const std::variant<_Types>&) [with _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[K’
[3.416s]  1398 |       variant& [01;36m[Koperator[m[K=(const variant&) = default;
[3.416s]       |                [01;36m[K^~~~~~~~[m[K
[3.416s] [01m[K/usr/include/c++/11/variant:1398:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from ‘[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[K’ {aka ‘[01m[Kstd::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[K’} to ‘[01m[Kconst std::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&[m[K’
[3.416s]  1398 |       variant& operator=([01;36m[Kconst variant&[m[K) = default;
[3.416s]       |                          [01;36m[K^~~~~~~~~~~~~~[m[K
[3.416s] [01m[K/usr/include/c++/11/variant:1399:16:[m[K [01;36m[Knote: [m[Kcandidate: ‘[01m[Kstd::variant<_Types>& std::variant<_Types>::operator=(std::variant<_Types>&&) [with _Types = {std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>}][m[K’
[3.416s]  1399 |       variant& [01;36m[Koperator[m[K=(variant&&) = default;
[3.416s]       |                [01;36m[K^~~~~~~~[m[K
[3.416s] [01m[K/usr/include/c++/11/variant:1399:26:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from ‘[01m[Krclcpp::detail::SubscriptionCallbackTypeHelper<turtlesim::msg::Pose_<std::allocator<void> >, std::_Bind<void (node::*(node*, std::_Placeholder<1>, std::__cxx11::basic_string<char>))(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>, void>::callback_type[m[K’ {aka ‘[01m[Kstd::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, std::__cxx11::basic_string<char>)>[m[K’} to ‘[01m[Kstd::variant<std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&)>, std::function<void(const turtlesim::msg::Pose_<std::allocator<void> >&, const rclcpp::MessageInfo&)>, std::function<void(const rclcpp::SerializedMessage&)>, std::function<void(const rclcpp::SerializedMessage&, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >)>, std::function<void(std::unique_ptr<turtlesim::msg::Pose_<std::allocator<void> >, std::default_delete<turtlesim::msg::Pose_<std::allocator<void> > > >, const rclcpp::MessageInfo&)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >)>, std::function<void(std::unique_ptr<rclcpp::SerializedMessage, std::default_delete<rclcpp::SerializedMessage> >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<const rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&)>, std::function<void(const std::shared_ptr<const turtlesim::msg::Pose_<std::allocator<void> > >&, const rclcpp::MessageInfo&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&)>, std::function<void(const std::shared_ptr<const rclcpp::SerializedMessage>&, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >)>, std::function<void(std::shared_ptr<turtlesim::msg::Pose_<std::allocator<void> > >, const rclcpp::MessageInfo&)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>)>, std::function<void(std::shared_ptr<rclcpp::SerializedMessage>, const rclcpp::MessageInfo&)> >&&[m[K’
[3.416s]  1399 |       variant& operator=([01;36m[Kvariant&&[m[K) = default;
[3.416s]       |                          [01;36m[K^~~~~~~~~[m[K
[3.922s] [ 62%] [32m[1mLinking CXX executable spawn[0m
[4.083s] [ 62%] Built target spawn
[4.507s] [ 75%] [32m[1mLinking CXX executable MYNODE[0m
[4.674s] [ 75%] Built target MYNODE
[4.781s] [ 87%] [32m[1mLinking CXX executable follow[0m
[4.907s] gmake[2]: *** [CMakeFiles/tf.dir/build.make:76：CMakeFiles/tf.dir/src/tf2_node.cpp.o] 错误 1
[4.907s] gmake[1]: *** [CMakeFiles/Makefile2:195：CMakeFiles/tf.dir/all] 错误 2
[4.907s] gmake[1]: *** 正在等待未完成的任务....
[4.971s] [ 87%] Built target follow
[4.972s] gmake: *** [Makefile:146：all] 错误 2
[4.973s] Invoked command in '/home/yin/ros2_asst1_ws/src/ros2_asst1/build/hello_ros' returned '2': CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}:/opt/ros/humble /usr/bin/cmake --build /home/yin/ros2_asst1_ws/src/ros2_asst1/build/hello_ros -- -j20 -l20
